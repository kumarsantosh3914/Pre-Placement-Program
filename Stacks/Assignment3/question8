int findMaxDifference(std::vector<int>& arr) {
    int n = arr.size();
    vector<int> leftSmaller(n, 0);
    vector<int> rightSmaller(n, 0);
    stack<int> st;
    for (int i = 0; i < n; i++) {
        while (!st.empty() && st.top() >= arr[i]) {
            st.pop();
        }
        if (!st.empty()) {
            leftSmaller[i] = st.top();
        }
        st.push(arr[i]);
    }

    while (!st.empty()) {
        st.pop();
    }

    for (int i = n - 1; i >= 0; i--) {
        while (!st.empty() && st.top() >= arr[i]) {
            st.pop();
        }
        if (!st.empty()) {
            rightSmaller[i] = st.top();
        }
        st.push(arr[i]);
    }
    int maxi = 0;
    for (int i = 0; i < n; i++) {
        int diff = abs(leftSmaller[i] - rightSmaller[i]);
        maxi = max(maxi, diff);
    }
    return maxi;
}
