#include <iostream>
#include <vector>
#include <algorithm>

int kadaneAlgorithm(const std::vector<int>& nums) {
  int maxSum = nums[0];
  int currentMax = nums[0];

  for (int i = 1; i < nums.size(); i++) {
    currentMax = max(nums[i], currentMax + nums[i]);
    maxSum = max(maxSum, currentMax);
  }

  return maxSum;
}

int maxSubarraySumCircular(const vector<int>& nums) {
  int maxKadane = kadaneAlgorithm(nums);
  int totalSum = 0;
  vector<int> negatedNums = nums;
  transform(negatedNums.begin(), negatedNums.end(), negatedNums.begin(), [](int num) {
    return -num;
  });

  int minKadane = -kadaneAlgorithm(negatedNums);
  for (int i = 0; i < nums.size(); i++) {
    totalSum += nums[i];
  }
  if (minKadane == totalSum) {
    return maxKadane;
  }
  return max(maxKadane, totalSum - minKadane);
}

